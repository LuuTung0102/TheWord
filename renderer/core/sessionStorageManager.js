// ========================================
// SESSION STORAGE MANAGER
// L∆∞u t·∫°m d·ªØ li·ªáu form ƒë·ªÉ t√°i s·ª≠ d·ª•ng
// ========================================

(function() {
  console.log('üîß Initializing sessionStorageManager...');
  
  const STORAGE_KEY = 'theword_session_data';

  /**
   * L∆∞u d·ªØ li·ªáu form v√†o sessionStorage
   * @param {string} fileName - T√™n file Word (vd: "Gi·∫•y ·ªßy quy·ªÅn.docx")
   * @param {object} formData - D·ªØ li·ªáu form ƒë√£ collect
   */
  function saveFormData(fileName, formData) {
    try {
      // L·∫•y data hi·ªán c√≥
      const existingData = getAllSessionData();
      
      // Ph√¢n t√≠ch formData th√†nh c√°c MEN groups
      const menGroups = parseFormDataToMenGroups(formData);
      
      // L∆∞u v·ªõi key l√† fileName
      existingData[fileName] = {
        timestamp: new Date().toISOString(),
        fileName: fileName,
        menGroups: menGroups,
        rawData: formData
      };
      
      // L∆∞u v√†o sessionStorage
      sessionStorage.setItem(STORAGE_KEY, JSON.stringify(existingData));
      
      console.log(`üíæ Saved session data for: ${fileName}`, menGroups);
      
      return true;
    } catch (error) {
      console.error('‚ùå Error saving session data:', error);
      return false;
    }
  }

  /**
   * Ph√¢n t√≠ch formData th√†nh c√°c groups (MEN, LAND, INFO...)
   * V√≠ d·ª•: 
   * - {Name1: "A", CCCD1: "123"} ‚Üí {MEN1: {Name: "A", CCCD: "123"}}
   * - {QSH: "AA", S: "100"} ‚Üí {LAND: {QSH: "AA", S: "100"}}
   */
  function parseFormDataToMenGroups(formData) {
    const groups = {};
    
    Object.keys(formData).forEach(key => {
      // 1. T√¨m suffix s·ªë ·ªü cu·ªëi key (vd: Name1 ‚Üí suffix=1, CCCD7 ‚Üí suffix=7)
      const matchWithSuffix = key.match(/^([A-Za-z_]+?)(\d+)$/);
      
      if (matchWithSuffix) {
        const fieldName = matchWithSuffix[1]; // vd: "Name", "CCCD"
        const suffix = matchWithSuffix[2];    // vd: "1", "7"
        const groupKey = `MEN${suffix}`;
        
        if (!groups[groupKey]) {
          groups[groupKey] = {};
        }
        
        groups[groupKey][fieldName] = formData[key];
      } else {
        // 2. Kh√¥ng c√≥ suffix s·ªë ‚Üí Group theo t√™n field (QSH, S, AddressD...)
        // C√°c field n√†y thu·ªôc v·ªÅ LAND, INFO, ho·∫∑c c√°c group kh√°c
        
        // Nh√≥m c√°c field kh√¥ng c√≥ suffix v√†o group "LAND" (m·∫∑c ƒë·ªãnh)
        // B·∫°n c√≥ th·ªÉ m·ªü r·ªông logic n√†y d·ª±a tr√™n field name
        const groupKey = determineGroupByFieldName(key);
        
        if (!groups[groupKey]) {
          groups[groupKey] = {};
        }
        
        groups[groupKey][key] = formData[key];
      }
    });
    
    return groups;
  }

  /**
   * X√°c ƒë·ªãnh group d·ª±a tr√™n field name
   */
  function determineGroupByFieldName(fieldName) {
    // C√°c field c·ªßa LAND
    const landFields = ['QSH', 'So_so', 'Ngay_CapD', 'Thua_dat_so', 'Ban_do_so', 
                        'S', 'Loai_Dat', 'HTSD', 'THSD', 'AddressD', 'TTGLVD', 
                        'Money', 'MoneyText', 'Responsibility', 'Note', 'VTTD'];
    
    if (landFields.includes(fieldName)) {
      return 'LAND';
    }
    
    // M·∫∑c ƒë·ªãnh: OTHER
    return 'OTHER';
  }

  /**
   * L·∫•y t·∫•t c·∫£ session data
   */
  function getAllSessionData() {
    try {
      const data = sessionStorage.getItem(STORAGE_KEY);
      return data ? JSON.parse(data) : {};
    } catch (error) {
      console.error('‚ùå Error loading session data:', error);
      return {};
    }
  }

  /**
   * L·∫•y danh s√°ch c√°c groups ƒë√£ l∆∞u (MEN1, MEN2, LAND, INFO...) t·ª´ t·∫•t c·∫£ files
   * @returns {Array} [{fileName, groupKey, data, timestamp, displayName}]
   */
  function getAvailableMenGroups() {
    const allData = getAllSessionData();
    const available = [];
    
    Object.keys(allData).forEach(fileName => {
      const fileData = allData[fileName];
      
      if (fileData.menGroups) {
        Object.keys(fileData.menGroups).forEach(groupKey => {
          const groupData = fileData.menGroups[groupKey];
          
          // T·∫°o display name ƒë·∫πp h∆°n
          let displayName = groupKey;
          
          // N·∫øu l√† MEN ‚Üí hi·ªÉn th·ªã t√™n ng∆∞·ªùi (n·∫øu c√≥)
          if (groupKey.startsWith('MEN') && groupData.Name) {
            displayName = `${groupKey} - ${groupData.Name}`;
          }
          // N·∫øu l√† LAND ‚Üí hi·ªÉn th·ªã ƒë·ªãa ch·ªâ ho·∫∑c s·ªë th·ª≠a
          else if (groupKey === 'LAND' && groupData.AddressD) {
            displayName = `LAND - ${groupData.AddressD}`;
          }
          
          available.push({
            fileName: fileName,
            groupKey: groupKey,    // ƒê·ªïi t·ª´ menKey ‚Üí groupKey
            menKey: groupKey,      // Gi·ªØ menKey ƒë·ªÉ backward compatible
            data: groupData,
            timestamp: fileData.timestamp,
            displayName: `${displayName} (${fileName.replace('.docx', '')})`
          });
        });
      }
    });
    
    // Sort by timestamp (newest first)
    available.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    return available;
  }

  /**
   * L·∫•y d·ªØ li·ªáu c·ªßa 1 MEN group c·ª• th·ªÉ
   * @param {string} fileName 
   * @param {string} menKey - vd: "MEN1", "MEN2"
   */
  function getMenGroupData(fileName, menKey) {
    const allData = getAllSessionData();
    
    if (allData[fileName] && allData[fileName].menGroups && allData[fileName].menGroups[menKey]) {
      return allData[fileName].menGroups[menKey];
    }
    
    return null;
  }

  /**
   * X√≥a to√†n b·ªô session data
   */
  function clearAllSessionData() {
    sessionStorage.removeItem(STORAGE_KEY);
    console.log('üóëÔ∏è Cleared all session data');
  }

  // Make functions available globally
  if (typeof window !== 'undefined') {
    window.sessionStorageManager = {
      saveFormData,
      getAllSessionData,
      getAvailableMenGroups,
      getMenGroupData,
      clearAllSessionData
    };
    console.log('‚úÖ sessionStorageManager is now available');
  }
})();

